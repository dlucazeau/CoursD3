<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <title>DataViz with D3.js</title>
        <script src="../../js/d3/d3.v3.js"></script>
    </head>
    <body>
    	<div id="svgQt" style="width: 45%; float: left;"></div>
    	<div id="svgCa" style="width: 45%; float: right;"></div>
    	<div id="svgRatio" style="width: 45%; float: left;"></div>
    	<div id="svgCaGlobal" style="width: 45%; float: right;"></div>
        <script>

        var diameter = 750,
            format = d3.format(",d"),
            color = d3.scale.category10();

        var bubble = d3.layout.pack()
            .sort(null)
            .size([diameter, diameter])
            .padding(1.5);

        var svgQt = d3.select("#svgQt").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        var svgCa = d3.select("#svgCa").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        var svgRatio = d3.select("#svgRatio").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        var svgCaGlobal = d3.select("#svgCaGlobal").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        d3.json("qt-ca.json", function(error, root) {
          var node = svgQt.selectAll(".node")
              .data(bubble.nodes(classesQt(root))
              .filter(function(d) { return !d.children; }))
            .enter().append("g")
              .attr("class", "node")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

          node.append("title")
              .text(function(d) { return d.className + ": " + format(d.value); });

          node.append("circle")
              .attr("r", function(d) { return d.r; })
              .style("fill", function(d) { return color(d.packageName); })
              .style("fill-opacity", .5);

          node.append("circle")
              .attr("r", function(d) { return d.r * d.ipqt; })
              .style("fill", function(d) { return color(d.packageName); });

          node.append("text")
              .attr("dy", ".3em")
              .style("text-anchor", "middle")
              .text(function(d) { return d.className.substring(0, d.r / 3); });
        });

        d3.json("qt-ca.json", function(error, root) {
          var node = svgCa.selectAll(".node")
              .data(bubble.nodes(classesCa(root))
              .filter(function(d) { return !d.children; }))
            .enter().append("g")
              .attr("class", "node")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

          node.append("title")
              .text(function(d) { return d.className + ": " + format(d.value); });

          node.append("circle")
              .attr("r", function(d) { return d.r; })
              .style("fill", function(d) { return color(d.packageName); });

          node.append("text")
              .attr("dy", ".3em")
              .style("text-anchor", "middle")
              .text(function(d) { return d.className.substring(0, d.r / 3); });
        });

        d3.json("qt-ca.json", function(error, root) {
          var node = svgRatio.selectAll(".node")
              .data(bubble.nodes(classesRatio(root))
              .filter(function(d) { return !d.children; }))
            .enter().append("g")
              .attr("class", "node")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

          node.append("title")
              .text(function(d) { return d.className + ": " + format(d.value); });

          node.append("circle")
              .attr("r", function(d) { return d.r; })
              .style("fill", function(d) { return color(d.packageName); });

          node.append("text")
              .attr("dy", ".3em")
              .style("text-anchor", "middle")
              .text(function(d) { return d.className.substring(0, d.r / 3); });
        });

        d3.json("qt-ca.json", function(error, root) {
          var node = svgCaGlobal.selectAll(".node")
              .data(bubble.nodes(classesCaGlobal(root))
              .filter(function(d) { return !d.children; }))
            .enter().append("g")
              .attr("class", "node")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

          node.append("title")
              .text(function(d) { return d.className + ": " + format(d.value); });

          node.append("circle")
              .attr("r", function(d) { return d.r; })
              .style("fill", function(d) { return color(d.packageName); });

          node.append("text")
              .attr("dy", ".3em")
              .style("text-anchor", "middle")
              .text(function(d) { return d.className.substring(0, d.r / 3); });
        });

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classesQt(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.qt, ipqt: node.ipqt});
          }

          recurse(null, root);
          return {children: classes};
        }

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classesCa(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.ca});
          }

          recurse(null, root);
          return {children: classes};
        }

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classesRatio(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.ca / node.qt});
          }

          recurse(null, root);
          return {children: classes};
        }

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classesCaGlobal(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.ca * node.qt});
          }

          recurse(null, root);
          return {children: classes};
        }

        //d3.select(self.frameElement).style("height", diameter + "px");

        </script>
    </body>
</html>